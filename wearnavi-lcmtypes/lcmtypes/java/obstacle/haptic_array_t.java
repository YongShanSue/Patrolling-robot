/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package obstacle;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class haptic_array_t implements lcm.lcm.LCMEncodable
{
    public long utime;
    public int state_id;
    public short has_input;
    public short see_ground;
    public double ground_height;
    public double ground_height_std;
    public double trans_xyzrpy[];
    public int num_ranges;
    public short ranges_state[];
    public double ranges_m[];
    public double ranges_ir_valid[];
    public double ranges_m_ir[];
    public double ranges_m_dense[];
    public double ranges_m_hit[];
    public short num_traj;
    public short ranges_trajlib_hit[];
    public short obj_ids[];
    public String tts_data;
    public short bbox_rgb_xs[];
    public short bbox_rgb_ys[];
    public short bbox_rgb_ws[];
    public short bbox_rgb_hs[];
    public short bbox_d_xs[];
    public short bbox_d_ys[];
    public short bbox_d_ws[];
    public short bbox_d_hs[];
    public short ranges[];
    public double h_min_r;
    public double h_max_r;
    public short h_pattern_setting;
    public short intensities[];
    public short frequencies[];
    public short states[];
 
    public haptic_array_t()
    {
        trans_xyzrpy = new double[6];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x7b14f4016d8e928eL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(obstacle.haptic_array_t.class))
            return 0L;
 
        classes.add(obstacle.haptic_array_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        char[] __strbuf = null;
        outs.writeLong(this.utime); 
 
        outs.writeInt(this.state_id); 
 
        outs.writeShort(this.has_input); 
 
        outs.writeShort(this.see_ground); 
 
        outs.writeDouble(this.ground_height); 
 
        outs.writeDouble(this.ground_height_std); 
 
        for (int a = 0; a < 6; a++) {
            outs.writeDouble(this.trans_xyzrpy[a]); 
        }
 
        outs.writeInt(this.num_ranges); 
 
        for (int a = 0; a < this.num_ranges; a++) {
            outs.writeShort(this.ranges_state[a]); 
        }
 
        for (int a = 0; a < this.num_ranges; a++) {
            outs.writeDouble(this.ranges_m[a]); 
        }
 
        for (int a = 0; a < this.num_ranges; a++) {
            outs.writeDouble(this.ranges_ir_valid[a]); 
        }
 
        for (int a = 0; a < this.num_ranges; a++) {
            outs.writeDouble(this.ranges_m_ir[a]); 
        }
 
        for (int a = 0; a < this.num_ranges; a++) {
            outs.writeDouble(this.ranges_m_dense[a]); 
        }
 
        for (int a = 0; a < this.num_ranges; a++) {
            outs.writeDouble(this.ranges_m_hit[a]); 
        }
 
        outs.writeShort(this.num_traj); 
 
        for (int a = 0; a < this.num_ranges; a++) {
            outs.writeShort(this.ranges_trajlib_hit[a]); 
        }
 
        for (int a = 0; a < this.num_ranges; a++) {
            outs.writeShort(this.obj_ids[a]); 
        }
 
        __strbuf = new char[this.tts_data.length()]; this.tts_data.getChars(0, this.tts_data.length(), __strbuf, 0); outs.writeInt(__strbuf.length+1); for (int _i = 0; _i < __strbuf.length; _i++) outs.write(__strbuf[_i]); outs.writeByte(0); 
 
        for (int a = 0; a < this.num_ranges; a++) {
            outs.writeShort(this.bbox_rgb_xs[a]); 
        }
 
        for (int a = 0; a < this.num_ranges; a++) {
            outs.writeShort(this.bbox_rgb_ys[a]); 
        }
 
        for (int a = 0; a < this.num_ranges; a++) {
            outs.writeShort(this.bbox_rgb_ws[a]); 
        }
 
        for (int a = 0; a < this.num_ranges; a++) {
            outs.writeShort(this.bbox_rgb_hs[a]); 
        }
 
        for (int a = 0; a < this.num_ranges; a++) {
            outs.writeShort(this.bbox_d_xs[a]); 
        }
 
        for (int a = 0; a < this.num_ranges; a++) {
            outs.writeShort(this.bbox_d_ys[a]); 
        }
 
        for (int a = 0; a < this.num_ranges; a++) {
            outs.writeShort(this.bbox_d_ws[a]); 
        }
 
        for (int a = 0; a < this.num_ranges; a++) {
            outs.writeShort(this.bbox_d_hs[a]); 
        }
 
        for (int a = 0; a < this.num_ranges; a++) {
            outs.writeShort(this.ranges[a]); 
        }
 
        outs.writeDouble(this.h_min_r); 
 
        outs.writeDouble(this.h_max_r); 
 
        outs.writeShort(this.h_pattern_setting); 
 
        for (int a = 0; a < this.num_ranges; a++) {
            outs.writeShort(this.intensities[a]); 
        }
 
        for (int a = 0; a < this.num_ranges; a++) {
            outs.writeShort(this.frequencies[a]); 
        }
 
        for (int a = 0; a < this.num_ranges; a++) {
            outs.writeShort(this.states[a]); 
        }
 
    }
 
    public haptic_array_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public haptic_array_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static obstacle.haptic_array_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        obstacle.haptic_array_t o = new obstacle.haptic_array_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        char[] __strbuf = null;
        this.utime = ins.readLong();
 
        this.state_id = ins.readInt();
 
        this.has_input = ins.readShort();
 
        this.see_ground = ins.readShort();
 
        this.ground_height = ins.readDouble();
 
        this.ground_height_std = ins.readDouble();
 
        this.trans_xyzrpy = new double[(int) 6];
        for (int a = 0; a < 6; a++) {
            this.trans_xyzrpy[a] = ins.readDouble();
        }
 
        this.num_ranges = ins.readInt();
 
        this.ranges_state = new short[(int) num_ranges];
        for (int a = 0; a < this.num_ranges; a++) {
            this.ranges_state[a] = ins.readShort();
        }
 
        this.ranges_m = new double[(int) num_ranges];
        for (int a = 0; a < this.num_ranges; a++) {
            this.ranges_m[a] = ins.readDouble();
        }
 
        this.ranges_ir_valid = new double[(int) num_ranges];
        for (int a = 0; a < this.num_ranges; a++) {
            this.ranges_ir_valid[a] = ins.readDouble();
        }
 
        this.ranges_m_ir = new double[(int) num_ranges];
        for (int a = 0; a < this.num_ranges; a++) {
            this.ranges_m_ir[a] = ins.readDouble();
        }
 
        this.ranges_m_dense = new double[(int) num_ranges];
        for (int a = 0; a < this.num_ranges; a++) {
            this.ranges_m_dense[a] = ins.readDouble();
        }
 
        this.ranges_m_hit = new double[(int) num_ranges];
        for (int a = 0; a < this.num_ranges; a++) {
            this.ranges_m_hit[a] = ins.readDouble();
        }
 
        this.num_traj = ins.readShort();
 
        this.ranges_trajlib_hit = new short[(int) num_ranges];
        for (int a = 0; a < this.num_ranges; a++) {
            this.ranges_trajlib_hit[a] = ins.readShort();
        }
 
        this.obj_ids = new short[(int) num_ranges];
        for (int a = 0; a < this.num_ranges; a++) {
            this.obj_ids[a] = ins.readShort();
        }
 
        __strbuf = new char[ins.readInt()-1]; for (int _i = 0; _i < __strbuf.length; _i++) __strbuf[_i] = (char) (ins.readByte()&0xff); ins.readByte(); this.tts_data = new String(__strbuf);
 
        this.bbox_rgb_xs = new short[(int) num_ranges];
        for (int a = 0; a < this.num_ranges; a++) {
            this.bbox_rgb_xs[a] = ins.readShort();
        }
 
        this.bbox_rgb_ys = new short[(int) num_ranges];
        for (int a = 0; a < this.num_ranges; a++) {
            this.bbox_rgb_ys[a] = ins.readShort();
        }
 
        this.bbox_rgb_ws = new short[(int) num_ranges];
        for (int a = 0; a < this.num_ranges; a++) {
            this.bbox_rgb_ws[a] = ins.readShort();
        }
 
        this.bbox_rgb_hs = new short[(int) num_ranges];
        for (int a = 0; a < this.num_ranges; a++) {
            this.bbox_rgb_hs[a] = ins.readShort();
        }
 
        this.bbox_d_xs = new short[(int) num_ranges];
        for (int a = 0; a < this.num_ranges; a++) {
            this.bbox_d_xs[a] = ins.readShort();
        }
 
        this.bbox_d_ys = new short[(int) num_ranges];
        for (int a = 0; a < this.num_ranges; a++) {
            this.bbox_d_ys[a] = ins.readShort();
        }
 
        this.bbox_d_ws = new short[(int) num_ranges];
        for (int a = 0; a < this.num_ranges; a++) {
            this.bbox_d_ws[a] = ins.readShort();
        }
 
        this.bbox_d_hs = new short[(int) num_ranges];
        for (int a = 0; a < this.num_ranges; a++) {
            this.bbox_d_hs[a] = ins.readShort();
        }
 
        this.ranges = new short[(int) num_ranges];
        for (int a = 0; a < this.num_ranges; a++) {
            this.ranges[a] = ins.readShort();
        }
 
        this.h_min_r = ins.readDouble();
 
        this.h_max_r = ins.readDouble();
 
        this.h_pattern_setting = ins.readShort();
 
        this.intensities = new short[(int) num_ranges];
        for (int a = 0; a < this.num_ranges; a++) {
            this.intensities[a] = ins.readShort();
        }
 
        this.frequencies = new short[(int) num_ranges];
        for (int a = 0; a < this.num_ranges; a++) {
            this.frequencies[a] = ins.readShort();
        }
 
        this.states = new short[(int) num_ranges];
        for (int a = 0; a < this.num_ranges; a++) {
            this.states[a] = ins.readShort();
        }
 
    }
 
    public obstacle.haptic_array_t copy()
    {
        obstacle.haptic_array_t outobj = new obstacle.haptic_array_t();
        outobj.utime = this.utime;
 
        outobj.state_id = this.state_id;
 
        outobj.has_input = this.has_input;
 
        outobj.see_ground = this.see_ground;
 
        outobj.ground_height = this.ground_height;
 
        outobj.ground_height_std = this.ground_height_std;
 
        outobj.trans_xyzrpy = new double[(int) 6];
        System.arraycopy(this.trans_xyzrpy, 0, outobj.trans_xyzrpy, 0, 6); 
        outobj.num_ranges = this.num_ranges;
 
        outobj.ranges_state = new short[(int) num_ranges];
        if (this.num_ranges > 0)
            System.arraycopy(this.ranges_state, 0, outobj.ranges_state, 0, this.num_ranges); 
        outobj.ranges_m = new double[(int) num_ranges];
        if (this.num_ranges > 0)
            System.arraycopy(this.ranges_m, 0, outobj.ranges_m, 0, this.num_ranges); 
        outobj.ranges_ir_valid = new double[(int) num_ranges];
        if (this.num_ranges > 0)
            System.arraycopy(this.ranges_ir_valid, 0, outobj.ranges_ir_valid, 0, this.num_ranges); 
        outobj.ranges_m_ir = new double[(int) num_ranges];
        if (this.num_ranges > 0)
            System.arraycopy(this.ranges_m_ir, 0, outobj.ranges_m_ir, 0, this.num_ranges); 
        outobj.ranges_m_dense = new double[(int) num_ranges];
        if (this.num_ranges > 0)
            System.arraycopy(this.ranges_m_dense, 0, outobj.ranges_m_dense, 0, this.num_ranges); 
        outobj.ranges_m_hit = new double[(int) num_ranges];
        if (this.num_ranges > 0)
            System.arraycopy(this.ranges_m_hit, 0, outobj.ranges_m_hit, 0, this.num_ranges); 
        outobj.num_traj = this.num_traj;
 
        outobj.ranges_trajlib_hit = new short[(int) num_ranges];
        if (this.num_ranges > 0)
            System.arraycopy(this.ranges_trajlib_hit, 0, outobj.ranges_trajlib_hit, 0, this.num_ranges); 
        outobj.obj_ids = new short[(int) num_ranges];
        if (this.num_ranges > 0)
            System.arraycopy(this.obj_ids, 0, outobj.obj_ids, 0, this.num_ranges); 
        outobj.tts_data = this.tts_data;
 
        outobj.bbox_rgb_xs = new short[(int) num_ranges];
        if (this.num_ranges > 0)
            System.arraycopy(this.bbox_rgb_xs, 0, outobj.bbox_rgb_xs, 0, this.num_ranges); 
        outobj.bbox_rgb_ys = new short[(int) num_ranges];
        if (this.num_ranges > 0)
            System.arraycopy(this.bbox_rgb_ys, 0, outobj.bbox_rgb_ys, 0, this.num_ranges); 
        outobj.bbox_rgb_ws = new short[(int) num_ranges];
        if (this.num_ranges > 0)
            System.arraycopy(this.bbox_rgb_ws, 0, outobj.bbox_rgb_ws, 0, this.num_ranges); 
        outobj.bbox_rgb_hs = new short[(int) num_ranges];
        if (this.num_ranges > 0)
            System.arraycopy(this.bbox_rgb_hs, 0, outobj.bbox_rgb_hs, 0, this.num_ranges); 
        outobj.bbox_d_xs = new short[(int) num_ranges];
        if (this.num_ranges > 0)
            System.arraycopy(this.bbox_d_xs, 0, outobj.bbox_d_xs, 0, this.num_ranges); 
        outobj.bbox_d_ys = new short[(int) num_ranges];
        if (this.num_ranges > 0)
            System.arraycopy(this.bbox_d_ys, 0, outobj.bbox_d_ys, 0, this.num_ranges); 
        outobj.bbox_d_ws = new short[(int) num_ranges];
        if (this.num_ranges > 0)
            System.arraycopy(this.bbox_d_ws, 0, outobj.bbox_d_ws, 0, this.num_ranges); 
        outobj.bbox_d_hs = new short[(int) num_ranges];
        if (this.num_ranges > 0)
            System.arraycopy(this.bbox_d_hs, 0, outobj.bbox_d_hs, 0, this.num_ranges); 
        outobj.ranges = new short[(int) num_ranges];
        if (this.num_ranges > 0)
            System.arraycopy(this.ranges, 0, outobj.ranges, 0, this.num_ranges); 
        outobj.h_min_r = this.h_min_r;
 
        outobj.h_max_r = this.h_max_r;
 
        outobj.h_pattern_setting = this.h_pattern_setting;
 
        outobj.intensities = new short[(int) num_ranges];
        if (this.num_ranges > 0)
            System.arraycopy(this.intensities, 0, outobj.intensities, 0, this.num_ranges); 
        outobj.frequencies = new short[(int) num_ranges];
        if (this.num_ranges > 0)
            System.arraycopy(this.frequencies, 0, outobj.frequencies, 0, this.num_ranges); 
        outobj.states = new short[(int) num_ranges];
        if (this.num_ranges > 0)
            System.arraycopy(this.states, 0, outobj.states, 0, this.num_ranges); 
        return outobj;
    }
 
}

