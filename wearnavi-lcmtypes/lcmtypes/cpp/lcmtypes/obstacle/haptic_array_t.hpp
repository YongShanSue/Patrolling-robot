/** THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
 * BY HAND!!
 *
 * Generated by lcm-gen
 **/

#include <lcm/lcm_coretypes.h>

#ifndef __obstacle_haptic_array_t_hpp__
#define __obstacle_haptic_array_t_hpp__

#include <vector>
#include <string>

namespace obstacle
{

class haptic_array_t
{
    public:
        int64_t    utime;

        int32_t    state_id;

        int16_t    has_input;

        int16_t    see_ground;

        double     ground_height;

        double     ground_height_std;

        double     trans_xyzrpy[6];

        int32_t    num_ranges;

        std::vector< int16_t > ranges_state;

        std::vector< double > ranges_m;

        std::vector< double > ranges_ir_valid;

        std::vector< double > ranges_m_ir;

        std::vector< double > ranges_m_dense;

        std::vector< double > ranges_m_hit;

        int16_t    num_traj;

        std::vector< int16_t > ranges_trajlib_hit;

        std::vector< int16_t > obj_ids;

        std::string tts_data;

        std::vector< int16_t > bbox_rgb_xs;

        std::vector< int16_t > bbox_rgb_ys;

        std::vector< int16_t > bbox_rgb_ws;

        std::vector< int16_t > bbox_rgb_hs;

        std::vector< int16_t > bbox_d_xs;

        std::vector< int16_t > bbox_d_ys;

        std::vector< int16_t > bbox_d_ws;

        std::vector< int16_t > bbox_d_hs;

        std::vector< int16_t > ranges;

        double     h_min_r;

        double     h_max_r;

        int16_t    h_pattern_setting;

        std::vector< int16_t > intensities;

        std::vector< int16_t > frequencies;

        std::vector< int16_t > states;

    public:
        /**
         * Encode a message into binary form.
         *
         * @param buf The output buffer.
         * @param offset Encoding starts at thie byte offset into @p buf.
         * @param maxlen Maximum number of bytes to write.  This should generally be
         *  equal to getEncodedSize().
         * @return The number of bytes encoded, or <0 on error.
         */
        inline int encode(void *buf, int offset, int maxlen) const;

        /**
         * Check how many bytes are required to encode this message.
         */
        inline int getEncodedSize() const;

        /**
         * Decode a message from binary form into this instance.
         *
         * @param buf The buffer containing the encoded message.
         * @param offset The byte offset into @p buf where the encoded message starts.
         * @param maxlen The maximum number of bytes to reqad while decoding.
         * @return The number of bytes decoded, or <0 if an error occured.
         */
        inline int decode(const void *buf, int offset, int maxlen);

        /**
         * Retrieve the 64-bit fingerprint identifying the structure of the message.
         * Note that the fingerprint is the same for all instances of the same
         * message type, and is a fingerprint on the message type definition, not on
         * the message contents.
         */
        inline static int64_t getHash();

        /**
         * Returns "haptic_array_t"
         */
        inline static const char* getTypeName();

        // LCM support functions. Users should not call these
        inline int _encodeNoHash(void *buf, int offset, int maxlen) const;
        inline int _getEncodedSizeNoHash() const;
        inline int _decodeNoHash(const void *buf, int offset, int maxlen);
        inline static uint64_t _computeHash(const __lcm_hash_ptr *p);
};

int haptic_array_t::encode(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;
    int64_t hash = (int64_t)getHash();

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &hash, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->_encodeNoHash(buf, offset + pos, maxlen - pos);
    if (tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int haptic_array_t::decode(const void *buf, int offset, int maxlen)
{
    int pos = 0, thislen;

    int64_t msg_hash;
    thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &msg_hash, 1);
    if (thislen < 0) return thislen; else pos += thislen;
    if (msg_hash != getHash()) return -1;

    thislen = this->_decodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

int haptic_array_t::getEncodedSize() const
{
    return 8 + _getEncodedSizeNoHash();
}

int64_t haptic_array_t::getHash()
{
    static int64_t hash = _computeHash(NULL);
    return hash;
}

const char* haptic_array_t::getTypeName()
{
    return "haptic_array_t";
}

int haptic_array_t::_encodeNoHash(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &this->utime, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->state_id, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->has_input, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->see_ground, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->ground_height, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->ground_height_std, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->trans_xyzrpy[0], 6);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_encode_array(buf, offset + pos, maxlen - pos, &this->num_ranges, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    if(this->num_ranges > 0) {
        tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->ranges_state[0], this->num_ranges);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->num_ranges > 0) {
        tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->ranges_m[0], this->num_ranges);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->num_ranges > 0) {
        tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->ranges_ir_valid[0], this->num_ranges);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->num_ranges > 0) {
        tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->ranges_m_ir[0], this->num_ranges);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->num_ranges > 0) {
        tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->ranges_m_dense[0], this->num_ranges);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->num_ranges > 0) {
        tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->ranges_m_hit[0], this->num_ranges);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->num_traj, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    if(this->num_ranges > 0) {
        tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->ranges_trajlib_hit[0], this->num_ranges);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->num_ranges > 0) {
        tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->obj_ids[0], this->num_ranges);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    char* tts_data_cstr = (char*) this->tts_data.c_str();
    tlen = __string_encode_array(buf, offset + pos, maxlen - pos, &tts_data_cstr, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    if(this->num_ranges > 0) {
        tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->bbox_rgb_xs[0], this->num_ranges);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->num_ranges > 0) {
        tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->bbox_rgb_ys[0], this->num_ranges);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->num_ranges > 0) {
        tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->bbox_rgb_ws[0], this->num_ranges);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->num_ranges > 0) {
        tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->bbox_rgb_hs[0], this->num_ranges);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->num_ranges > 0) {
        tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->bbox_d_xs[0], this->num_ranges);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->num_ranges > 0) {
        tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->bbox_d_ys[0], this->num_ranges);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->num_ranges > 0) {
        tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->bbox_d_ws[0], this->num_ranges);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->num_ranges > 0) {
        tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->bbox_d_hs[0], this->num_ranges);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->num_ranges > 0) {
        tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->ranges[0], this->num_ranges);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->h_min_r, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->h_max_r, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->h_pattern_setting, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    if(this->num_ranges > 0) {
        tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->intensities[0], this->num_ranges);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->num_ranges > 0) {
        tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->frequencies[0], this->num_ranges);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->num_ranges > 0) {
        tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->states[0], this->num_ranges);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    return pos;
}

int haptic_array_t::_decodeNoHash(const void *buf, int offset, int maxlen)
{
    int pos = 0, tlen;

    tlen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &this->utime, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->state_id, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->has_input, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->see_ground, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->ground_height, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->ground_height_std, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->trans_xyzrpy[0], 6);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &this->num_ranges, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    if(this->num_ranges) {
        this->ranges_state.resize(this->num_ranges);
        tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->ranges_state[0], this->num_ranges);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->num_ranges) {
        this->ranges_m.resize(this->num_ranges);
        tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->ranges_m[0], this->num_ranges);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->num_ranges) {
        this->ranges_ir_valid.resize(this->num_ranges);
        tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->ranges_ir_valid[0], this->num_ranges);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->num_ranges) {
        this->ranges_m_ir.resize(this->num_ranges);
        tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->ranges_m_ir[0], this->num_ranges);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->num_ranges) {
        this->ranges_m_dense.resize(this->num_ranges);
        tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->ranges_m_dense[0], this->num_ranges);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->num_ranges) {
        this->ranges_m_hit.resize(this->num_ranges);
        tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->ranges_m_hit[0], this->num_ranges);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->num_traj, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    if(this->num_ranges) {
        this->ranges_trajlib_hit.resize(this->num_ranges);
        tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->ranges_trajlib_hit[0], this->num_ranges);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->num_ranges) {
        this->obj_ids.resize(this->num_ranges);
        tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->obj_ids[0], this->num_ranges);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    int32_t __tts_data_len__;
    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &__tts_data_len__, 1);
    if(tlen < 0) return tlen; else pos += tlen;
    if(__tts_data_len__ > maxlen - pos) return -1;
    this->tts_data.assign(((const char*)buf) + offset + pos, __tts_data_len__ - 1);
    pos += __tts_data_len__;

    if(this->num_ranges) {
        this->bbox_rgb_xs.resize(this->num_ranges);
        tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->bbox_rgb_xs[0], this->num_ranges);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->num_ranges) {
        this->bbox_rgb_ys.resize(this->num_ranges);
        tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->bbox_rgb_ys[0], this->num_ranges);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->num_ranges) {
        this->bbox_rgb_ws.resize(this->num_ranges);
        tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->bbox_rgb_ws[0], this->num_ranges);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->num_ranges) {
        this->bbox_rgb_hs.resize(this->num_ranges);
        tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->bbox_rgb_hs[0], this->num_ranges);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->num_ranges) {
        this->bbox_d_xs.resize(this->num_ranges);
        tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->bbox_d_xs[0], this->num_ranges);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->num_ranges) {
        this->bbox_d_ys.resize(this->num_ranges);
        tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->bbox_d_ys[0], this->num_ranges);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->num_ranges) {
        this->bbox_d_ws.resize(this->num_ranges);
        tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->bbox_d_ws[0], this->num_ranges);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->num_ranges) {
        this->bbox_d_hs.resize(this->num_ranges);
        tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->bbox_d_hs[0], this->num_ranges);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->num_ranges) {
        this->ranges.resize(this->num_ranges);
        tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->ranges[0], this->num_ranges);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->h_min_r, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->h_max_r, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->h_pattern_setting, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    if(this->num_ranges) {
        this->intensities.resize(this->num_ranges);
        tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->intensities[0], this->num_ranges);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->num_ranges) {
        this->frequencies.resize(this->num_ranges);
        tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->frequencies[0], this->num_ranges);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    if(this->num_ranges) {
        this->states.resize(this->num_ranges);
        tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->states[0], this->num_ranges);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    return pos;
}

int haptic_array_t::_getEncodedSizeNoHash() const
{
    int enc_size = 0;
    enc_size += __int64_t_encoded_array_size(NULL, 1);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int16_t_encoded_array_size(NULL, 1);
    enc_size += __int16_t_encoded_array_size(NULL, 1);
    enc_size += __double_encoded_array_size(NULL, 1);
    enc_size += __double_encoded_array_size(NULL, 1);
    enc_size += __double_encoded_array_size(NULL, 6);
    enc_size += __int32_t_encoded_array_size(NULL, 1);
    enc_size += __int16_t_encoded_array_size(NULL, this->num_ranges);
    enc_size += __double_encoded_array_size(NULL, this->num_ranges);
    enc_size += __double_encoded_array_size(NULL, this->num_ranges);
    enc_size += __double_encoded_array_size(NULL, this->num_ranges);
    enc_size += __double_encoded_array_size(NULL, this->num_ranges);
    enc_size += __double_encoded_array_size(NULL, this->num_ranges);
    enc_size += __int16_t_encoded_array_size(NULL, 1);
    enc_size += __int16_t_encoded_array_size(NULL, this->num_ranges);
    enc_size += __int16_t_encoded_array_size(NULL, this->num_ranges);
    enc_size += this->tts_data.size() + 4 + 1;
    enc_size += __int16_t_encoded_array_size(NULL, this->num_ranges);
    enc_size += __int16_t_encoded_array_size(NULL, this->num_ranges);
    enc_size += __int16_t_encoded_array_size(NULL, this->num_ranges);
    enc_size += __int16_t_encoded_array_size(NULL, this->num_ranges);
    enc_size += __int16_t_encoded_array_size(NULL, this->num_ranges);
    enc_size += __int16_t_encoded_array_size(NULL, this->num_ranges);
    enc_size += __int16_t_encoded_array_size(NULL, this->num_ranges);
    enc_size += __int16_t_encoded_array_size(NULL, this->num_ranges);
    enc_size += __int16_t_encoded_array_size(NULL, this->num_ranges);
    enc_size += __double_encoded_array_size(NULL, 1);
    enc_size += __double_encoded_array_size(NULL, 1);
    enc_size += __int16_t_encoded_array_size(NULL, 1);
    enc_size += __int16_t_encoded_array_size(NULL, this->num_ranges);
    enc_size += __int16_t_encoded_array_size(NULL, this->num_ranges);
    enc_size += __int16_t_encoded_array_size(NULL, this->num_ranges);
    return enc_size;
}

uint64_t haptic_array_t::_computeHash(const __lcm_hash_ptr *)
{
    uint64_t hash = 0x7b14f4016d8e928eLL;
    return (hash<<1) + ((hash>>63)&1);
}

}

#endif
