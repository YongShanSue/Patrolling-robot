/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package kinect;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class frame_msg_t implements lcm.lcm.LCMEncodable
{
    public long timestamp;
    public kinect.image_msg_t image;
    public kinect.depth_msg_t depth;
    public short raw_accel[];
    public byte raw_tilt;
    public double accel[];
    public double tilt_radians;
    public byte led_status;
    public byte tilt_status;
 
    public frame_msg_t()
    {
        raw_accel = new short[3];
        accel = new double[3];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x92191b3e928f7e79L;
 
    public static final byte LED_OFF = (byte) 0;
    public static final byte LED_GREEN = (byte) 1;
    public static final byte LED_RED = (byte) 2;
    public static final byte LED_YELLOW = (byte) 3;
    public static final byte LED_BLINK_YELLOW = (byte) 4;
    public static final byte LED_BLINK_GREEN = (byte) 5;
    public static final byte LED_BLINK_RED_YELLOW = (byte) 6;
    public static final byte TILT_STATUS_STOPPED = (byte) 0x00;
    public static final byte TILT_STATUS_LIMIT = (byte) 0x01;
    public static final byte TILT_STATUS_MOVING = (byte) 0x04;

    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(kinect.frame_msg_t.class))
            return 0L;
 
        classes.add(kinect.frame_msg_t.class);
        long hash = LCM_FINGERPRINT_BASE
             + kinect.image_msg_t._hashRecursive(classes)
             + kinect.depth_msg_t._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.timestamp); 
 
        this.image._encodeRecursive(outs); 
 
        this.depth._encodeRecursive(outs); 
 
        for (int a = 0; a < 3; a++) {
            outs.writeShort(this.raw_accel[a]); 
        }
 
        outs.writeByte(this.raw_tilt); 
 
        for (int a = 0; a < 3; a++) {
            outs.writeDouble(this.accel[a]); 
        }
 
        outs.writeDouble(this.tilt_radians); 
 
        outs.writeByte(this.led_status); 
 
        outs.writeByte(this.tilt_status); 
 
    }
 
    public frame_msg_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public frame_msg_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static kinect.frame_msg_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        kinect.frame_msg_t o = new kinect.frame_msg_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.timestamp = ins.readLong();
 
        this.image = kinect.image_msg_t._decodeRecursiveFactory(ins);
 
        this.depth = kinect.depth_msg_t._decodeRecursiveFactory(ins);
 
        this.raw_accel = new short[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.raw_accel[a] = ins.readShort();
        }
 
        this.raw_tilt = ins.readByte();
 
        this.accel = new double[(int) 3];
        for (int a = 0; a < 3; a++) {
            this.accel[a] = ins.readDouble();
        }
 
        this.tilt_radians = ins.readDouble();
 
        this.led_status = ins.readByte();
 
        this.tilt_status = ins.readByte();
 
    }
 
    public kinect.frame_msg_t copy()
    {
        kinect.frame_msg_t outobj = new kinect.frame_msg_t();
        outobj.timestamp = this.timestamp;
 
        outobj.image = this.image.copy();
 
        outobj.depth = this.depth.copy();
 
        outobj.raw_accel = new short[(int) 3];
        System.arraycopy(this.raw_accel, 0, outobj.raw_accel, 0, 3); 
        outobj.raw_tilt = this.raw_tilt;
 
        outobj.accel = new double[(int) 3];
        System.arraycopy(this.accel, 0, outobj.accel, 0, 3); 
        outobj.tilt_radians = this.tilt_radians;
 
        outobj.led_status = this.led_status;
 
        outobj.tilt_status = this.tilt_status;
 
        return outobj;
    }
 
}

