/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package kinect;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class pointcloud_t implements lcm.lcm.LCMEncodable
{
    public long timestamp;
    public int num;
    public float x[];
    public float y[];
    public float z[];
 
    public pointcloud_t()
    {
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x4b80c1a0b287166eL;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(kinect.pointcloud_t.class))
            return 0L;
 
        classes.add(kinect.pointcloud_t.class);
        long hash = LCM_FINGERPRINT_BASE
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.timestamp); 
 
        outs.writeInt(this.num); 
 
        for (int a = 0; a < this.num; a++) {
            outs.writeFloat(this.x[a]); 
        }
 
        for (int a = 0; a < this.num; a++) {
            outs.writeFloat(this.y[a]); 
        }
 
        for (int a = 0; a < this.num; a++) {
            outs.writeFloat(this.z[a]); 
        }
 
    }
 
    public pointcloud_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public pointcloud_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static kinect.pointcloud_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        kinect.pointcloud_t o = new kinect.pointcloud_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.timestamp = ins.readLong();
 
        this.num = ins.readInt();
 
        this.x = new float[(int) num];
        for (int a = 0; a < this.num; a++) {
            this.x[a] = ins.readFloat();
        }
 
        this.y = new float[(int) num];
        for (int a = 0; a < this.num; a++) {
            this.y[a] = ins.readFloat();
        }
 
        this.z = new float[(int) num];
        for (int a = 0; a < this.num; a++) {
            this.z[a] = ins.readFloat();
        }
 
    }
 
    public kinect.pointcloud_t copy()
    {
        kinect.pointcloud_t outobj = new kinect.pointcloud_t();
        outobj.timestamp = this.timestamp;
 
        outobj.num = this.num;
 
        outobj.x = new float[(int) num];
        if (this.num > 0)
            System.arraycopy(this.x, 0, outobj.x, 0, this.num); 
        outobj.y = new float[(int) num];
        if (this.num > 0)
            System.arraycopy(this.y, 0, outobj.y, 0, this.num); 
        outobj.z = new float[(int) num];
        if (this.num > 0)
            System.arraycopy(this.z, 0, outobj.z, 0, this.num); 
        return outobj;
    }
 
}

