/* LCM type definition class file
 * This file was automatically generated by lcm-gen
 * DO NOT MODIFY BY HAND!!!!
 */

package kinect;
 
import java.io.*;
import java.util.*;
import lcm.lcm.*;
 
public final class segmentlist_t implements lcm.lcm.LCMEncodable
{
    public long timestamp;
    public kinect.projected_point2d_t left_normalized_line[];
    public kinect.projected_point2d_t right_normalized_line[];
    public kinect.projected_point2d_t left_normal;
    public kinect.projected_point2d_t right_normal;
 
    public segmentlist_t()
    {
        left_normalized_line = new kinect.projected_point2d_t[2];
        right_normalized_line = new kinect.projected_point2d_t[2];
    }
 
    public static final long LCM_FINGERPRINT;
    public static final long LCM_FINGERPRINT_BASE = 0x48082176126ad5f3L;
 
    static {
        LCM_FINGERPRINT = _hashRecursive(new ArrayList<Class<?>>());
    }
 
    public static long _hashRecursive(ArrayList<Class<?>> classes)
    {
        if (classes.contains(kinect.segmentlist_t.class))
            return 0L;
 
        classes.add(kinect.segmentlist_t.class);
        long hash = LCM_FINGERPRINT_BASE
             + kinect.projected_point2d_t._hashRecursive(classes)
             + kinect.projected_point2d_t._hashRecursive(classes)
             + kinect.projected_point2d_t._hashRecursive(classes)
             + kinect.projected_point2d_t._hashRecursive(classes)
            ;
        classes.remove(classes.size() - 1);
        return (hash<<1) + ((hash>>63)&1);
    }
 
    public void encode(DataOutput outs) throws IOException
    {
        outs.writeLong(LCM_FINGERPRINT);
        _encodeRecursive(outs);
    }
 
    public void _encodeRecursive(DataOutput outs) throws IOException
    {
        outs.writeLong(this.timestamp); 
 
        for (int a = 0; a < 2; a++) {
            this.left_normalized_line[a]._encodeRecursive(outs); 
        }
 
        for (int a = 0; a < 2; a++) {
            this.right_normalized_line[a]._encodeRecursive(outs); 
        }
 
        this.left_normal._encodeRecursive(outs); 
 
        this.right_normal._encodeRecursive(outs); 
 
    }
 
    public segmentlist_t(byte[] data) throws IOException
    {
        this(new LCMDataInputStream(data));
    }
 
    public segmentlist_t(DataInput ins) throws IOException
    {
        if (ins.readLong() != LCM_FINGERPRINT)
            throw new IOException("LCM Decode error: bad fingerprint");
 
        _decodeRecursive(ins);
    }
 
    public static kinect.segmentlist_t _decodeRecursiveFactory(DataInput ins) throws IOException
    {
        kinect.segmentlist_t o = new kinect.segmentlist_t();
        o._decodeRecursive(ins);
        return o;
    }
 
    public void _decodeRecursive(DataInput ins) throws IOException
    {
        this.timestamp = ins.readLong();
 
        this.left_normalized_line = new kinect.projected_point2d_t[(int) 2];
        for (int a = 0; a < 2; a++) {
            this.left_normalized_line[a] = kinect.projected_point2d_t._decodeRecursiveFactory(ins);
        }
 
        this.right_normalized_line = new kinect.projected_point2d_t[(int) 2];
        for (int a = 0; a < 2; a++) {
            this.right_normalized_line[a] = kinect.projected_point2d_t._decodeRecursiveFactory(ins);
        }
 
        this.left_normal = kinect.projected_point2d_t._decodeRecursiveFactory(ins);
 
        this.right_normal = kinect.projected_point2d_t._decodeRecursiveFactory(ins);
 
    }
 
    public kinect.segmentlist_t copy()
    {
        kinect.segmentlist_t outobj = new kinect.segmentlist_t();
        outobj.timestamp = this.timestamp;
 
        outobj.left_normalized_line = new kinect.projected_point2d_t[(int) 2];
        for (int a = 0; a < 2; a++) {
            outobj.left_normalized_line[a] = this.left_normalized_line[a].copy();
        }
 
        outobj.right_normalized_line = new kinect.projected_point2d_t[(int) 2];
        for (int a = 0; a < 2; a++) {
            outobj.right_normalized_line[a] = this.right_normalized_line[a].copy();
        }
 
        outobj.left_normal = this.left_normal.copy();
 
        outobj.right_normal = this.right_normal.copy();
 
        return outobj;
    }
 
}

