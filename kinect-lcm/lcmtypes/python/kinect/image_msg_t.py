"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

class image_msg_t(object):
    __slots__ = ["timestamp", "width", "height", "image_data_nbytes", "image_data", "image_data_format"]

    VIDEO_RGB = 0
    VIDEO_BAYER = 1
    VIDEO_IR_8BIT = 2
    VIDEO_IR_10BIT = 3
    VIDEO_IR_10BIT_PACKED = 4
    VIDEO_YUV_RGB = 5
    VIDEO_YUV_RAW = 6
    VIDEO_RGB_JPEG = 100
    VIDEO_NONE = 101

    def __init__(self):
        self.timestamp = 0
        self.width = 0
        self.height = 0
        self.image_data_nbytes = 0
        self.image_data = ""
        self.image_data_format = 0

    def encode(self):
        buf = BytesIO()
        buf.write(image_msg_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">qhhi", self.timestamp, self.width, self.height, self.image_data_nbytes))
        buf.write(bytearray(self.image_data[:self.image_data_nbytes]))
        buf.write(struct.pack(">b", self.image_data_format))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != image_msg_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return image_msg_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = image_msg_t()
        self.timestamp, self.width, self.height, self.image_data_nbytes = struct.unpack(">qhhi", buf.read(16))
        self.image_data = buf.read(self.image_data_nbytes)
        self.image_data_format = struct.unpack(">b", buf.read(1))[0]
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if image_msg_t in parents: return 0
        tmphash = (0x1fc0e88fea09363) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if image_msg_t._packed_fingerprint is None:
            image_msg_t._packed_fingerprint = struct.pack(">Q", image_msg_t._get_hash_recursive([]))
        return image_msg_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

