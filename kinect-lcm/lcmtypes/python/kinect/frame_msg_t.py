"""LCM type definitions
This file automatically generated by lcm.
DO NOT MODIFY BY HAND!!!!
"""

try:
    import cStringIO.StringIO as BytesIO
except ImportError:
    from io import BytesIO
import struct

import kinect.depth_msg_t

import kinect.image_msg_t

class frame_msg_t(object):
    __slots__ = ["timestamp", "image", "depth", "raw_accel", "raw_tilt", "accel", "tilt_radians", "led_status", "tilt_status"]

    LED_OFF = 0
    LED_GREEN = 1
    LED_RED = 2
    LED_YELLOW = 3
    LED_BLINK_YELLOW = 4
    LED_BLINK_GREEN = 5
    LED_BLINK_RED_YELLOW = 6
    TILT_STATUS_STOPPED = 0x00
    TILT_STATUS_LIMIT = 0x01
    TILT_STATUS_MOVING = 0x04

    def __init__(self):
        self.timestamp = 0
        self.image = kinect.image_msg_t()
        self.depth = kinect.depth_msg_t()
        self.raw_accel = [ 0 for dim0 in range(3) ]
        self.raw_tilt = 0
        self.accel = [ 0.0 for dim0 in range(3) ]
        self.tilt_radians = 0.0
        self.led_status = 0
        self.tilt_status = 0

    def encode(self):
        buf = BytesIO()
        buf.write(frame_msg_t._get_packed_fingerprint())
        self._encode_one(buf)
        return buf.getvalue()

    def _encode_one(self, buf):
        buf.write(struct.pack(">q", self.timestamp))
        assert self.image._get_packed_fingerprint() == kinect.image_msg_t._get_packed_fingerprint()
        self.image._encode_one(buf)
        assert self.depth._get_packed_fingerprint() == kinect.depth_msg_t._get_packed_fingerprint()
        self.depth._encode_one(buf)
        buf.write(struct.pack('>3h', *self.raw_accel[:3]))
        buf.write(struct.pack(">b", self.raw_tilt))
        buf.write(struct.pack('>3d', *self.accel[:3]))
        buf.write(struct.pack(">dbb", self.tilt_radians, self.led_status, self.tilt_status))

    def decode(data):
        if hasattr(data, 'read'):
            buf = data
        else:
            buf = BytesIO(data)
        if buf.read(8) != frame_msg_t._get_packed_fingerprint():
            raise ValueError("Decode error")
        return frame_msg_t._decode_one(buf)
    decode = staticmethod(decode)

    def _decode_one(buf):
        self = frame_msg_t()
        self.timestamp = struct.unpack(">q", buf.read(8))[0]
        self.image = kinect.image_msg_t._decode_one(buf)
        self.depth = kinect.depth_msg_t._decode_one(buf)
        self.raw_accel = struct.unpack('>3h', buf.read(6))
        self.raw_tilt = struct.unpack(">b", buf.read(1))[0]
        self.accel = struct.unpack('>3d', buf.read(24))
        self.tilt_radians, self.led_status, self.tilt_status = struct.unpack(">dbb", buf.read(10))
        return self
    _decode_one = staticmethod(_decode_one)

    _hash = None
    def _get_hash_recursive(parents):
        if frame_msg_t in parents: return 0
        newparents = parents + [frame_msg_t]
        tmphash = (0x92191b3e928f7e79+ kinect.image_msg_t._get_hash_recursive(newparents)+ kinect.depth_msg_t._get_hash_recursive(newparents)) & 0xffffffffffffffff
        tmphash  = (((tmphash<<1)&0xffffffffffffffff)  + (tmphash>>63)) & 0xffffffffffffffff
        return tmphash
    _get_hash_recursive = staticmethod(_get_hash_recursive)
    _packed_fingerprint = None

    def _get_packed_fingerprint():
        if frame_msg_t._packed_fingerprint is None:
            frame_msg_t._packed_fingerprint = struct.pack(">Q", frame_msg_t._get_hash_recursive([]))
        return frame_msg_t._packed_fingerprint
    _get_packed_fingerprint = staticmethod(_get_packed_fingerprint)

